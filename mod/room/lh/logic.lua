---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by dongyf.
--- DateTime: 2019-06-07 16:54
---

local timer = require('timer')
local rule = require('room.lh.gameRule')
local Date = require('pl.Date')

local Card = Card
local Cards = Cards

local logic = {}

local MAX_EXPIRED_TIME = 2000000000
local LH_ACTION = rule.LH_ACTION
local LH_COUNTDOWN = rule.LH_COUNTDOWN
local LH_ACTION_STR = rule.LH_ACTION_STR

function logic:init()
    self.statusExpired = 0
    self.status = LH_ACTION.EMPTY
    self.isPause = false
    self.updateNum = 0
    self.round = 0
    self.gamesn = 0
    self.card1 = 0
    self.card2 = 0
    self.startTime = ""
    self.bets = {}
    self.cards = Cards.new(52, 8)
    self.regs = {}
    self.dealNoNum = 0
    self.dealNum = 0
    self.cardNum = 416
    self.maxNum = 416

    self.Date = Date()
    self.Date:_init()

    self.timer = timer:new()
    self.timer:init(1 * 100)
    self.timer:register(1, self.onCall.onLoop, false, self)

    self:regExpire(LH_ACTION.EMPTY, function() self:emptyExpire() end)
    self:regExpire(LH_ACTION.SHUFFLE, function() self:shuffleExpire() end)
    self:regExpire(LH_ACTION.READY, function() self:readyExpire() end)
    self:regExpire(LH_ACTION.HOLE, function() self:holeExpire() end)
    self:regExpire(LH_ACTION.BET, function() self:betExpire() end)
    self:regExpire(LH_ACTION.OPEN, function() self:openExpire() end)
    self:regExpire(LH_ACTION.BONUS, function() self:bonusExpire() end)
    self:regExpire(LH_ACTION.STOP, function() self:bonusExpire() end)
end

function logic:start(room)
    self.room = room
    self.onCall = room.onCall

    self:init()
end

-- 设置状态
function logic:setStatus(status)
    self.statusExpired = LH_COUNTDOWN[status]
    self.status = status
    DEBUG(string.format("更换状态%s  时间%s", tostring(LH_ACTION_STR[status]), tostring(LH_COUNTDOWN[status])))
    self.room:broadcast({_cmd = "room_status.changge", status = tostring(LH_ACTION_STR[status]), count = self.statusExpired})
    --self:updateBonusInfo({action = status, gamesn = self.gamesn, time = RealTime(), countdown = LH_COUNTDOWN[status]})
end

function logic:checkTime()
    --DEBUG("logic:checkTime")
    if 0 < self.statusExpired and self.statusExpired < MAX_EXPIRED_TIME then
        self.statusExpired = self.statusExpired - 1
    end
    self.room:broadcast({_cmd = "room_status.count", status = tostring(LH_ACTION_STR[self.status]), count = self.statusExpired})
end

function logic:logic()
    if self.statusExpired <= 0 and self.isPlaying then
        self:onStatusExpire(self.status)
    end
    DEBUG("self.statusExpired : ", self.statusExpired , ' isPlaying: ', (self.isPlaying and "true" or 'false'))
end

function logic:onStatusExpire(status)
    local statusFun = self.regs[status]
    if statusFun then
        statusFun()
    end
end

function logic:updateRoom()
    --DEBUG("logic:updateRoom")
    -- 暂停功能
    if self.isPause then
        return
    end

    self.updateNum = self.updateNum + 1

    if self.updateNum > 3 then
        WARN('updateNum > 3 ' .. tostring(debug.traceback()))
        self.updateNum = 0
        return
    end

    -- 运行中
    if self.isPlaying then
        self:logic()
    else
        self:checkPlayingGame()
    end

    self.updateNum = self.updateNum - 1
    if self.updateNum < 0 then
        self.updateNum = 0
    end

end

function logic:canPlayLogic()
    return true
end

function logic:startPlayingGame()
    if self:canStartNextRound() then
        self:restartGame()
    end
end

-- 每局开头都需要检查能不能进行游戏状态
function logic:canStartNextRound()
    if self:canPlayLogic() then
        self.isPlaying = true
        return true
    else
        self.isPlaying = false
        return false
    end
end

-- 检查状态 是否能够开始
function logic:checkPlayingGame()

    assert(not self.isPlaying, 'checkNextHand must isPlaying = false')
    if self.isPlaying then
        return
    end

    if self:canPlayLogic() then
        self:startPlayingGame()
    end

end

function logic:regExpire(status, fun)
    self.regs[status] = fun
end

function logic:readyStatus()
    self.round = self.round + 1
    --self.gamesn = Gox.redis:incr('gamesn')
    -- 牌局编号
    --self:setGameNo()
    --self:setRoomData(self.roomType)
    self:setStatus(LH_ACTION.READY)
    self.card1 = 0
    self.card2 = 0
    self.startTime = self.Date:toLocal()

    -- 获取matchType
    self.aiActions = {}
    --self.matchType = self:getMatchType()
    -- if utils.roomType(self.sn) == 9002 then
    -- 	self.matchType = utils.MATCHTYPE.KILL
    -- elseif utils.roomType(self.sn) == 9003 then
    -- 	self.matchType = utils.MATCHTYPE.DIVE
    -- end
    -- 对局日志
    self.record = {
        tm = self.startTime,
        gamesn = self.gamesn,
        room = self.roomType,
        tableId = self.sn,
        att = {},	--玩家信息
        pub1 = 0,	--旧平台牌型
        info = {},
        td = 0,	--结束时间
        roomType = self.matchType, -- 房间类型
    }
    -- 牌数
    self.dealNum = self.cards:getDealNum() + self.dealNoNum
    self.cardNum = self.maxNum - self.cards:getDealNum()
    --self:checkRobotStatus()
end

function logic:restartGame()
    DEBUG("logic:restartGame")
    self:readyStatus()
end

function logic:emptyExpire()
    DEBUG('logic:emptyExpire')
    self:setStatus(LH_ACTION.SHUFFLE)
end

function logic:shuffleExpire()
    DEBUG('logic:shuffleExpire')
    self:setStatus(LH_ACTION.READY)
end

function logic:readyExpire()
    DEBUG('logic:readyExpire')
    self:setStatus(LH_ACTION.HOLE)
end

function logic:holeExpire()
    DEBUG('logic:holeExpire')
    self:setStatus(LH_ACTION.BET)
end

function logic:betExpire()
    DEBUG('logic:betExpire')
    self:setStatus(LH_ACTION.OPEN)
end

function logic:openExpire()
    DEBUG('logic:openExpire')
    self:setStatus(LH_ACTION.BONUS)
end

function logic:bonusExpire()
    DEBUG('logic:bonusExpire')
    self:setStatus(LH_ACTION.EMPTY)
end


function logic:onBet(uid, info)
    local amount = info.amount
    DEBUG('logic:onBet, uid: ',uid, ' 下注: ', amount)
    return true
end

return logic